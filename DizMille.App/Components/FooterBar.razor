@using System.Diagnostics
<MudPaper Square Color=@Color.Primary Class="pa-5">
    <MudStack>
        <MudButton Color=@Color.Primary
                   Variant="Variant.Filled"
                   @onclick=@(() => _dialogIsVisible = true)
                   Style="width: 100%">
            Add
        </MudButton>
        <MudStack Row>
            <AddScoreButton Score=50 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=100 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=400 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=500 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=1000 ScoreChanged=@OnScoreChangedAsync />
        </MudStack>
        <MudStack Row>
            <AddScoreButton Score=-50 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=-100 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=-400 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=-500 ScoreChanged=@OnScoreChangedAsync />
            <AddScoreButton Score=-1000 ScoreChanged=@OnScoreChangedAsync />
        </MudStack>
    </MudStack>
</MudPaper>

<AddPlayer Created=@PlayerAdded @bind-IsVisible=@_dialogIsVisible />

@code{
    private readonly TimeSpan NotifDuration = TimeSpan.FromMilliseconds(3000);

    private bool _dialogIsVisible;
    private Stopwatch _stopwatch = Stopwatch.StartNew();
    private TimeSpan? _lastAdd;
    private int _currentScoreAdded;

    [Inject] ISnackbar Snackbar { get; set; } = default!;

    [Parameter] public EventCallback ScoreChanged { get; set; }

    [Parameter] public EventCallback PlayerAdded { get; set; }

    private async Task OnScoreChangedAsync(int scoreToAdd)
    {
        NotifyScoreAdded(scoreToAdd);
        await ScoreChanged.InvokeAsync();
    }

    private void NotifyScoreAdded(int scoreToAdd)
    {
        var elapsed = _stopwatch.Elapsed;
        _currentScoreAdded = (_lastAdd is not null && elapsed - _lastAdd < NotifDuration)
            ? _currentScoreAdded + scoreToAdd : scoreToAdd;

        _lastAdd = elapsed;

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.ShowTransitionDuration = 100;

        Snackbar.Add(_currentScoreAdded.ToString(), Severity.Normal);
    }
}